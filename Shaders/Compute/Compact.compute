#include "HLSLSupport.cginc"
#include "../InstancingCore.hlsl"

#pragma kernel CSMain

StructuredBuffer<InstanceData> _InstanceData;
StructuredBuffer<uint> _DrawCallCounts;
StructuredBuffer<uint> _SortKeys;

RWStructuredBuffer<InstanceProperties> _InstanceProperties;
RWStructuredBuffer<DrawArgs> _DrawArgs;

[numthreads(512, 1, 1)]
void CSMain(int tID : SV_DispatchThreadID, uint groupID : SV_GroupID)
{
    // scatter instance data based on the index determined by the sort
    uint sortKey = tID < _InstanceCount ? _SortKeys[tID] : ANIMATION_INSTANCING_NULL_SORT_KEY;

    if (sortKey != ANIMATION_INSTANCING_NULL_SORT_KEY)
    {
        uint instanceIndex = GetInstanceIndexFromSortingKey(sortKey);
        InstanceData data = _InstanceData[instanceIndex];
        
        InstanceProperties properties;
        properties.model = TRS(data.position, data.rotation, data.scale);
        properties.modelInv =  InvertMatrix(properties.model);
        properties.animationIndex = data.animationBaseIndex + data.animationIndex;
        properties.animationTime = data.animationTime;
        
        _InstanceProperties[tID] = properties;
    }

    // write the index of the first instance of this type in the draw args buffer
    if ((tID * groupID) == 0)
    {
		// use scan algorithm instead. Also consider deferring modifying draw args until here
        int instanceStart = 0;
        
        for (int i = 0; i < _DrawArgsCount;)
        {
            instanceStart += i > 0 ? _DrawArgs[i - 1].instanceCount : 0;
            uint drawCallCount = _DrawCallCounts[i];
            
            for (uint j = 0; j < drawCallCount; j++)
            {
                _DrawArgs[i].instanceStart = instanceStart;
                i++;
            }
        }
    }
}