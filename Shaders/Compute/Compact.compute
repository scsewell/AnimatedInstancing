#include "HLSLSupport.cginc"
#include "../InstancingCore.hlsl"

#pragma kernel CSMain

StructuredBuffer<InstanceData> _InstanceData;
StructuredBuffer<uint> _IsVisible;
StructuredBuffer<uint> _ScanInBucket;
StructuredBuffer<uint> _ScanAcrossBuckets;
StructuredBuffer<uint> _DrawCallCounts;

RWStructuredBuffer<InstanceProperties> _InstanceProperties;
RWStructuredBuffer<DrawArgs> _DrawArgs;

[numthreads(512, 1, 1)]
void CSMain(uint tID : SV_DispatchThreadID, uint groupID : SV_GroupID)
{
    // scatter instance data based on the index determined by the scan
    if (_IsVisible[tID] == 1)
    {
        InstanceData data = _InstanceData[tID];
        
        InstanceProperties properties;
        properties.model = TRS(data.position, data.rotation, data.scale);
        properties.modelInv =  InvertMatrix(properties.model);
        properties.animationIndex = data.animationBaseIndex + data.animationIndex;
        properties.animationTime = data.animationTime;
        
        uint instanceOutIndex = _ScanInBucket[tID] + (groupID > 0 ? _ScanAcrossBuckets[groupID] : 0);
        _InstanceProperties[instanceOutIndex] = properties;
    }

    // write the index of the first instance of this type in the draw args buffer
    if ((tID * groupID) == 0)
    {
        int instanceStart = 0;
        _DrawArgs[0].instanceStart = instanceStart;
        
        for (int i = 1; i < _DrawArgsCount;)
        {
            instanceStart += _DrawArgs[i - 1].instanceCount;
            uint drawCallCount = _DrawCallCounts[i];
            
            for (uint j = 0; j < drawCallCount; j++)
            {
                _DrawArgs[i].instanceStart = instanceStart;
                i++;
            }
        }
    }
}