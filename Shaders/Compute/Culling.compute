#include "HLSLSupport.cginc"
#include "../InstancingCore.hlsl"

#pragma kernel ResetCounts
#pragma kernel Cull

StructuredBuffer<LodData> _LodData;
StructuredBuffer<AnimationData> _AnimationData;
StructuredBuffer<InstanceData> _InstanceData;

RWStructuredBuffer<uint> _InstanceCounts;
RWStructuredBuffer<uint> _SortKeys;

[numthreads(64, 1, 1)]
void ResetCounts(uint tID : SV_DispatchThreadID)
{
    if (tID < _NumInstanceCounts)
    {
		_InstanceCounts[tID] = 0;
    }
}

bool FrustumCull(float4 clipPos)
{
    return
        clipPos.x <  clipPos.w &&
        clipPos.y <  clipPos.w &&
        clipPos.z <  clipPos.w &&
        clipPos.x > -clipPos.w &&
        clipPos.y > -clipPos.w;
}

bool IsOutsideBounds(float3 pos, float3 center, float3 extents)
{
    // This is a fast approximation suitable for bounds that are 
    // of similar size in each dimention.
    float3 disp = pos - center;
    return dot(disp, disp) > (2 * dot(extents, extents));
}

[numthreads(64, 1, 1)]
void Cull(uint tID : SV_DispatchThreadID)
{
    uint i; 
    
    InstanceData instance = _InstanceData[tID];
    LodData lod = _LodData[instance.lodIndex];
    AnimationData animation = _AnimationData[instance.animationIndex];

    // calculate the local to world matrix and mvp for the instance
    Transform transform = DecompressTransform(instance.transform);
    float4x4 modelMat = TransformToMatrix(transform);
    float4x4 mvp = mul(_ViewProj, modelMat);

    // determine if the instance bounds are visible in the frustum
    float3 minCorner = animation.bounds.center - animation.bounds.extents;
    float3 maxCorner = animation.bounds.center + animation.bounds.extents;

    float4 corners[8];
    corners[0] = float4(minCorner.x, minCorner.y, minCorner.z, 1.0);
    corners[1] = float4(minCorner.x, minCorner.y, maxCorner.z, 1.0);
    corners[2] = float4(minCorner.x, maxCorner.y, minCorner.z, 1.0);
    corners[3] = float4(minCorner.x, maxCorner.y, maxCorner.z, 1.0);
    corners[4] = float4(maxCorner.x, minCorner.y, minCorner.z, 1.0);
    corners[5] = float4(maxCorner.x, minCorner.y, maxCorner.z, 1.0);
    corners[6] = float4(maxCorner.x, maxCorner.y, minCorner.z, 1.0);
    corners[7] = float4(maxCorner.x, maxCorner.y, maxCorner.z, 1.0);

    bool isInFrustum = false;

    UNITY_UNROLL
    for (i = 0; i < 8; i++)
    {
        isInFrustum = isInFrustum || FrustumCull(mul(mvp, corners[i]));
    }

    // check if the camera is inside the instance bounds
    float3 worldCenter = mul(modelMat, float4(animation.bounds.center, 1.0)).xyz;
    float3 scaledExtents = animation.bounds.extents * transform.scale;

    bool isCameraOutsideBounds = IsOutsideBounds(_CameraPosition, worldCenter, scaledExtents);

    // check if the instance is culled based on LOD
    float lodDistance = distance(_CameraPosition, worldCenter) / _LodBias;
    float maxExtent = max(max(scaledExtents.x, scaledExtents.y), scaledExtents.z);
    float lodFactor = _LodScale * maxExtent;
    float cullDistance = lodFactor / lod.screenHeights[lod.lodCount - 1];

    bool isLodVisible = lodDistance < cullDistance;

    // determine the final visibility
    bool isVisible = !isCameraOutsideBounds || (isInFrustum && isLodVisible);

    // select the appropriate lod
    uint selectedLod = 0;

    UNITY_UNROLL
    for (i = 0; i < ANIMATION_INSTANCING_MAX_LOD_COUNT; i++)
    {
        selectedLod += lodDistance > (lodFactor / lod.screenHeights[i]);
    }

    // prepare the sorting data for this instance
    uint countIndex = instance.countBaseIndex + selectedLod;
    uint sortingKey = CreateSortingKey(countIndex, tID);

    if (tID < (uint)_InstanceCount)
    {
        InterlockedAdd(_InstanceCounts[countIndex], isVisible);
        _SortKeys[tID] = isVisible ? sortingKey : ANIMATION_INSTANCING_NULL_SORT_KEY;
    }
}